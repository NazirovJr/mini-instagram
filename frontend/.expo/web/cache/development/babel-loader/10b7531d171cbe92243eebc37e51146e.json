{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase\";\nimport { USER_FOLLOW_STATE_CHANGE, USER_POST_STATE_CHANGE, USER_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POST_STATE_CHANGE } from \"../const\";\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      debugger;\n      dispatch({\n        type: USER_POST_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollow() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        return doc.id;\n      });\n      debugger;\n      dispatch({\n        type: USER_FOLLOW_STATE_CHANGE,\n        following: following\n      });\n    });\n  };\n}\nexport function fetchUsersData(uid) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.data().uid;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n          dispatch(fetchUsersFollowingPosts(user.uid));\n        } else {\n          console.log('does not exist');\n        }\n      });\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var user = getState().usersState.users.find(function (el) {\n          return el === uid;\n        });\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USERS_POST_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/projects/React and JS/instagram/njr-instagram/Redux/action/index.js"],"names":["firebase","USER_FOLLOW_STATE_CHANGE","USER_POST_STATE_CHANGE","USER_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POST_STATE_CHANGE","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollow","onSnapshot","following","fetchUsersData","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","find"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport {\r\n    USER_FOLLOW_STATE_CHANGE,\r\n    USER_POST_STATE_CHANGE,\r\n    USER_STATE_CHANGE,\r\n    USERS_DATA_STATE_CHANGE,\r\n    USERS_POST_STATE_CHANGE\r\n} from \"../const\";\r\n\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"users\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\r\n                    }\r\n                    else {\r\n                        console.log('does not exist')\r\n                    }\r\n                })\r\n        })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"posts\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .collection(\"userPosts\")\r\n                .orderBy(\"creation\",\"asc\")\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let posts = snapshot.docs.map(doc => {\r\n                        const data = doc.data()\r\n                        const id = doc.id\r\n                        return{id, ...data}\r\n                    })\r\n                    debugger\r\n                    dispatch({ type: USER_POST_STATE_CHANGE, posts })\r\n                })\r\n\r\n        })\r\n}\r\nexport function fetchUserFollow() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"following\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .collection(\"userFollowing\")\r\n                .onSnapshot((snapshot) => {\r\n                    let following = snapshot.docs.map(doc => {\r\n                        return doc.id\r\n                    })\r\n                    debugger\r\n                    dispatch({ type: USER_FOLLOW_STATE_CHANGE, following })\r\n                })\r\n\r\n        })\r\n}\r\n\r\n\r\nexport function fetchUsersData(uid) {\r\n    return(dispatch,getState) => {\r\n        const found = getState().usersState.users.some(el => el === uid)\r\n        if (!found){\r\n            firebase.firestore()\r\n                .collection(\"users\")\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data()\r\n                        user.uid = snapshot.data().uid\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user })\r\n                        dispatch(fetchUsersFollowingPosts(user.uid))\r\n                    }\r\n                    else {\r\n                        console.log('does not exist')\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return(dispatch,getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\",\"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const user = getState().usersState.users.find(el => el === uid)\r\n                    const data = doc.data()\r\n                    const id = doc.id\r\n                    return{id, ...data, user}\r\n                })\r\n                dispatch({ type: USERS_POST_STATE_CHANGE, posts, uid })\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}