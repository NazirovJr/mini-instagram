{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase\";\nimport { USER_FOLLOW_STATE_CHANGE, USER_POST_STATE_CHANGE, USER_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POST_STATE_CHANGE, CLEAR_DATA } from \"../const\";\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      debugger;\n      dispatch({\n        type: USER_POST_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollow() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        return doc.id;\n      });\n      dispatch({\n        type: USER_FOLLOW_STATE_CHANGE,\n        following: following\n      });\n\n      for (var _iterator = _createForOfIteratorHelperLoose(following), _step; !(_step = _iterator()).done;) {\n        var i = _step.value;\n        dispatch(fetchUsersData(i, true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USERS_POST_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/projects/React and JS/instagram/njr-instagram/Redux/action/index.js"],"names":["firebase","USER_FOLLOW_STATE_CHANGE","USER_POST_STATE_CHANGE","USER_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POST_STATE_CHANGE","CLEAR_DATA","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollow","onSnapshot","following","i","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find"],"mappings":"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","sourcesContent":["import firebase from \"firebase\";\r\nimport {\r\n    USER_FOLLOW_STATE_CHANGE,\r\n    USER_POST_STATE_CHANGE,\r\n    USER_STATE_CHANGE,\r\n    USERS_DATA_STATE_CHANGE,\r\n    USERS_POST_STATE_CHANGE,\r\n    CLEAR_DATA\r\n} from \"../const\";\r\n\r\nexport function clearData ()\r\n{\r\n    return(dispatch) => {\r\n        dispatch({type:CLEAR_DATA})\r\n    }\r\n}\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"users\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\r\n                    }\r\n                    else {\r\n                        console.log('does not exist')\r\n                    }\r\n                })\r\n        })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"posts\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .collection(\"userPosts\")\r\n                .orderBy(\"creation\",\"asc\")\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let posts = snapshot.docs.map(doc => {\r\n                        const data = doc.data()\r\n                        const id = doc.id\r\n                        return{id, ...data}\r\n                    })\r\n                    debugger\r\n                    dispatch({ type: USER_POST_STATE_CHANGE, posts })\r\n                })\r\n\r\n        })\r\n}\r\nexport function fetchUserFollow() {\r\n    return ((dispatch) => {\r\n            firebase.firestore()\r\n                .collection(\"following\")\r\n                .doc(firebase.auth().currentUser.uid)\r\n                .collection(\"userFollowing\")\r\n                .onSnapshot((snapshot) => {\r\n                    let following = snapshot.docs.map(doc => {\r\n                        return doc.id\r\n                    })\r\n                    dispatch({ type: USER_FOLLOW_STATE_CHANGE, following })\r\n                    for (let i of following){\r\n                        dispatch(fetchUsersData(i,true))\r\n                    }\r\n                })\r\n        })\r\n}\r\n\r\n\r\n\r\nexport function fetchUsersData(uid, getPosts) {\r\n    return ((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        if (!found) {\r\n            firebase.firestore()\r\n                .collection(\"users\")\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data();\r\n                        user.uid = snapshot.id;\r\n\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\r\n                    }\r\n                    else {\r\n                        console.log('does not exist')\r\n                    }\r\n                })\r\n            if(getPosts){\r\n                dispatch(fetchUsersFollowingPosts(uid));\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return ((dispatch, getState) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(uid)\r\n            .collection(\"userPosts\")\r\n            .orderBy(\"creation\", \"asc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                const uid = snapshot.query.EP.path.segments[1];\r\n                const user = getState().usersState.users.find(el => el.uid === uid);\r\n                let posts = snapshot.docs.map(doc => {\r\n                    const data = doc.data();\r\n                    const id = doc.id;\r\n                    return { id, ...data, user }\r\n                })\r\n                dispatch({ type: USERS_POST_STATE_CHANGE, posts, uid })\r\n\r\n            })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}