{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\React and JS\\\\instagram\\\\njr-instagram\\\\components\\\\main\\\\Comment.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport firebase from \"firebase\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { fetchUsersData } from \"../../Redux/action\";\n\nrequire(\"firebase/firestore\");\n\nfunction Comment(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      comments = _useState2[0],\n      setComments = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      postId = _useState4[0],\n      setPostId = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      text = _useState6[0],\n      setText = _useState6[1];\n\n  function matchUsersComment(comments) {\n    var _loop = function _loop(comment) {\n      if (comment.hasOwnProperty('user')) {\n        return \"continue\";\n      }\n\n      var user = props.users.find(function (el) {\n        return el.uid === comment.creator;\n      });\n\n      if (user === undefined) {\n        props.fetchUsersData(comment.creator, false);\n      } else {\n        comment.user = user;\n      }\n    };\n\n    for (var _iterator = _createForOfIteratorHelperLoose(comments), _step; !(_step = _iterator()).done;) {\n      var comment = _step.value;\n\n      var _ret = _loop(comment);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    setComments(comments);\n  }\n\n  useEffect(function () {\n    if (props.route.params.postId !== postId) {\n      firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(props.route.params.postId).collection(\"comments\").get().then(function (snapshot) {\n        var comments = snapshot.docs.map(function (doc) {\n          var data = doc.data();\n          var id = doc.id;\n          return _objectSpread({\n            id: id\n          }, data);\n        });\n        matchUsersComment(comments);\n      });\n      setPostId(props.route.params.postId);\n    } else {\n      matchUsersComment(comments);\n    }\n  }, [props.route.params.postId, props.users]);\n\n  var onCommentSend = function onCommentSend() {\n    firebase.firestore().collection(\"posts\").doc(props.route.params.uid).collection(\"userPosts\").doc(props.route.params.postId).collection(\"comments\").add({\n      creator: firebase.auth().currentUser.uid,\n      text: text\n    });\n  };\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: comments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }\n      }, item.user !== undefined ? React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 56\n        }\n      }, item.user.name) : null, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }\n      }, item.text));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })), React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"comment ...\",\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Send\",\n    onPress: function onPress() {\n      return onCommentSend();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })));\n}\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    users: store.usersState.users\n  };\n};\n\nvar mapDispatchProps = function mapDispatchProps(dispatch) {\n  return bindActionCreators({\n    fetchUsersData: fetchUsersData\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchProps)(Comment);","map":{"version":3,"sources":["D:/projects/React and JS/instagram/njr-instagram/components/main/Comment.js"],"names":["React","useState","useEffect","firebase","connect","bindActionCreators","fetchUsersData","require","Comment","props","comments","setComments","postId","setPostId","text","setText","matchUsersComment","comment","hasOwnProperty","user","users","find","el","uid","creator","undefined","route","params","firestore","collection","doc","get","then","snapshot","docs","map","data","id","onCommentSend","add","auth","currentUser","item","name","mapStateToProps","store","usersState","mapDispatchProps","dispatch"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport {View, Text, TextInput, Button, FlatList} from \"react-native\";\r\nimport firebase from \"firebase\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {fetchUsersData} from \"../../Redux/action\";\r\nrequire(\"firebase/firestore\")\r\n\r\nfunction Comment(props) {\r\n    const [comments, setComments] = useState([])\r\n    const [postId, setPostId] = useState(\"\")\r\n    const [text, setText] = useState(\"\")\r\n    function matchUsersComment (comments){\r\n        for (let comment of comments){\r\n            if(comment.hasOwnProperty('user')){\r\n                continue\r\n            }\r\n            const user = props.users.find(el => el.uid === comment.creator)\r\n            if (user === undefined){\r\n                props.fetchUsersData(comment.creator,false)\r\n            } else {\r\n                comment.user = user\r\n            }\r\n        }\r\n        setComments(comments)\r\n    }\r\n    useEffect(() => {\r\n        if (props.route.params.postId !== postId) {\r\n            firebase.firestore()\r\n                .collection(\"posts\")\r\n                .doc(props.route.params.uid)\r\n                .collection(\"userPosts\")\r\n                .doc(props.route.params.postId)\r\n                .collection(\"comments\")\r\n                .get()\r\n                .then((snapshot) => {\r\n                    let comments = snapshot.docs.map(doc => {\r\n                        const data = doc.data()\r\n                        const id = doc.id\r\n                        return ({id, ...data})\r\n                    })\r\n                    matchUsersComment(comments)\r\n                })\r\n            setPostId(props.route.params.postId)\r\n        } else {\r\n            matchUsersComment(comments)\r\n        }\r\n    }, [props.route.params.postId, props.users])\r\n    const onCommentSend = () => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(props.route.params.uid)\r\n            .collection(\"userPosts\")\r\n            .doc(props.route.params.postId)\r\n            .collection(\"comments\")\r\n            .add({\r\n                creator:firebase.auth().currentUser.uid,\r\n                text\r\n            })\r\n    }\r\n    return (\r\n        <View>\r\n            <View>\r\n                <FlatList\r\n                    numColumns={1}\r\n                    horizontal={false}\r\n                    data={comments}\r\n                    renderItem={({item}) => (\r\n                        <View>\r\n                            {item.user !== undefined ? <Text>{item.user.name}</Text>:null}\r\n                            <Text>{item.text}</Text>\r\n                        </View>\r\n                    )}/>\r\n            </View>\r\n            <View>\r\n                <TextInput\r\n                placeholder={\"comment ...\"}\r\n                onChangeText={(text) => setText(text)}/>\r\n                <Button\r\n                title=\"Send\"\r\n                onPress={() => onCommentSend()}/>\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (store) => ({\r\n    users: store.usersState.users\r\n})\r\nconst mapDispatchProps = (dispatch) => bindActionCreators({fetchUsersData}, dispatch)\r\nexport default connect(mapStateToProps, mapDispatchProps)(Comment)"]},"metadata":{},"sourceType":"module"}