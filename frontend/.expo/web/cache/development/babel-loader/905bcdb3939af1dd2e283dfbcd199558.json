{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"D:\\\\projects\\\\React and JS\\\\instagram\\\\njr-instagram\\\\components\\\\main\\\\Save.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport firebase from \"firebase\";\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function Save(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var childUrL = \"posts/\" + firebase.auth().currentUser.uid + \"/\" + Math.round().toString(36);\n\n  var uploadImage = function uploadImage() {\n    var uri, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 6:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childUrL).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transffered: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePicture(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePicture = function savePicture(downloadUrl) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").add({\n      downloadUrl: downloadUrl,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop();\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Write a Caption\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["D:/projects/React and JS/instagram/njr-instagram/components/main/Save.js"],"names":["React","useState","firebase","require","Save","props","caption","setCaption","childUrL","auth","currentUser","uid","Math","round","toString","uploadImage","uri","route","params","image","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","savePicture","taskError","on","downloadUrl","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","navigation","popToTop","flex"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\r\nimport {View, TextInput, Button, Image} from 'react-native'\r\nimport firebase from \"firebase\";\r\nrequire(\"firebase/firestore\")\r\nrequire(\"firebase/firebase-storage\")\r\n\r\nexport default function Save(props){\r\n    const [caption,setCaption] = useState(\"\")\r\n    const childUrL = `posts/${firebase.auth().currentUser.uid}/${Math.round().toString(36)}`\r\n    const uploadImage = async () => {\r\n        const uri = props.route.params.image\r\n        const response = await fetch(uri)\r\n        const blob = await response.blob()\r\n        const task = firebase\r\n            .storage()\r\n            .ref()\r\n            .child(childUrL)\r\n            .put(blob)\r\n\r\n        const taskProgress = snapshot => {\r\n            console.log(`transffered: ${snapshot.bytesTransferred}`)\r\n        }\r\n\r\n        const taskCompleted = () => {\r\n            task.snapshot.ref.getDownloadURL().then((snapshot) => {\r\n                savePicture(snapshot)\r\n            })\r\n        }\r\n\r\n        const taskError = snapshot => {\r\n            console.log(snapshot)\r\n        }\r\n        task.on(\"state_changed\",taskProgress,taskError, taskCompleted)\r\n    }\r\n\r\n    const savePicture = (downloadUrl) => {\r\n        firebase.firestore()\r\n            .collection(\"posts\")\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection(\"userPosts\")\r\n            .add({\r\n                downloadUrl,\r\n                caption,\r\n                creation:firebase.firestore.FieldValue.serverTimestamp()\r\n            })\r\n            .then(function() {\r\n                props.navigation.popToTop()\r\n            })\r\n    }\r\n    return(\r\n        <View style={{flex:1}}>\r\n            <Image source={{uri:props.route.params.image}}/>\r\n            <TextInput placeholder={\"Write a Caption\"} onChangeText={(caption) => setCaption(caption)}/>\r\n            <Button title=\"Save\" onPress={() => uploadImage()}/>\r\n        </View>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}