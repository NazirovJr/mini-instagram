{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA } from \"../constants/index\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var _iterator = _createForOfIteratorHelperLoose(following), _step; !(_step = _iterator()).done;) {\n        var follow = _step.value;\n        dispatch(fetchUsersData(follow, true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.query.EP.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(posts), _step2; !(_step2 = _iterator2()).done;) {\n        var post = _step2.value;\n        dispatch(fetchUsersFollowingLikes(uid, post.id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"sources":["D:/projects/React and JS/instagram/njr-instagram/frontend/redux/actions/index.js"],"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","USERS_LIKES_STATE_CHANGE","CLEAR_DATA","firebase","require","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","follow","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","query","EP","path","segments","find","post","fetchUsersFollowingLikes","postId","ZE","currentUserLike"],"mappings":"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","sourcesContent":["import { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE,USERS_POSTS_STATE_CHANGE, USERS_LIKES_STATE_CHANGE, CLEAR_DATA} from '../constants/index'\nimport firebase from 'firebase'\nrequire('firebase/firestore')\n\n\nexport function clearData() {\n    return ((dispatch) => {\n        dispatch({type: CLEAR_DATA})\n    })\n}\nexport function fetchUser() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                if (snapshot.exists) {\n                    dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\n                }\n                else {\n                    console.log('does not exist')\n                }\n            })\n    })\n}\n\nexport function fetchUserPosts() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\nexport function fetchUserFollowing() {\n    return ((dispatch) => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {\n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\n                for(let  follow of following){\n                    dispatch(fetchUsersData(follow, true));\n                }\n            })\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return ((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid);\n        if (!found) {\n            firebase.firestore()\n                .collection(\"users\")\n                .doc(uid)\n                .get()\n                .then((snapshot) => {\n                    if (snapshot.exists) {\n                        let user = snapshot.data();\n                        user.uid = snapshot.id;\n\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\n                    }\n                    else {\n                        console.log('does not exist')\n                    }\n                })\n                if(getPosts){\n                    dispatch(fetchUsersFollowingPosts(uid));\n                }\n        }\n    })\n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                const uid = snapshot.query.EP.path.segments[1];\n                const user = getState().usersState.users.find(el => el.uid === uid);\n\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n                for (let post of posts){\n                    dispatch(fetchUsersFollowingLikes(uid, post.id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return ((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.ZE.path.segments[3];\n\n                let currentUserLike = false;\n                if(snapshot.exists){\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n    })\n}"]},"metadata":{},"sourceType":"module"}